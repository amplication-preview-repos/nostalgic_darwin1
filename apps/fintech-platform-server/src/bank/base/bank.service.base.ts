/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Bank as PrismaBank } from "@prisma/client";

export class BankServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BankCountArgs, "select">): Promise<number> {
    return this.prisma.bank.count(args);
  }

  async banks<T extends Prisma.BankFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankFindManyArgs>
  ): Promise<PrismaBank[]> {
    return this.prisma.bank.findMany<Prisma.BankFindManyArgs>(args);
  }
  async bank<T extends Prisma.BankFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankFindUniqueArgs>
  ): Promise<PrismaBank | null> {
    return this.prisma.bank.findUnique(args);
  }
  async createBank<T extends Prisma.BankCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankCreateArgs>
  ): Promise<PrismaBank> {
    return this.prisma.bank.create<T>(args);
  }
  async updateBank<T extends Prisma.BankUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankUpdateArgs>
  ): Promise<PrismaBank> {
    return this.prisma.bank.update<T>(args);
  }
  async deleteBank<T extends Prisma.BankDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankDeleteArgs>
  ): Promise<PrismaBank> {
    return this.prisma.bank.delete(args);
  }
}
